import {
    io
    fmt
    errors
}

// errors.Must wraps handler so it behaves like a node without error outport.
def Main(start any) (stop any) {
    println fmt.Println<any>
    must_handle errors.Must<any, any>{Handler}
    panic Panic
    ---
    :start -> 'create_me.txt' -> must_handle -> 'success!' -> println
    println:res -> :stop
    println:err -> panic
}

// Handler have error outport.
def Handler(data string) (res any, err error) {
    write_all io.WriteAll?
    ---
    :data -> write_all:filename
    'Hello, io.WriteAll!' -> write_all:data
    write_all:res -> :res
}
